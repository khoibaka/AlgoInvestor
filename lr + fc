{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"lr + fc","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"c-jPEtEqje0u","colab_type":"code","outputId":"7bd1af69-e1ab-4d39-a611-3a66db08a8a8","executionInfo":{"status":"ok","timestamp":1561471881045,"user_tz":240,"elapsed":505,"user":{"displayName":"Khoi Le","photoUrl":"","userId":"13786060992805210098"}},"colab":{"base_uri":"https://localhost:8080/","height":320}},"source":["# sample points \n","X = [0, 5, 10, 15, 20]\n","Y = [0, 7, 10, 13, 20]\n","\n","# solve for a and b\n","def best_fit(X, Y):\n","\n","    xbar = sum(X)/len(X)\n","    ybar = sum(Y)/len(Y)\n","    n = len(X) # or len(Y)\n","\n","    numer = sum([xi*yi for xi,yi in zip(X, Y)]) - n * xbar * ybar\n","    denum = sum([xi**2 for xi in X]) - n * xbar**2\n","\n","    b = numer / denum\n","    a = ybar - b * xbar\n","    return a, b\n","    \n","\n","# solution\n","a, b = best_fit(X, Y)\n","#best fit line:\n","#y = 0.80 + 0.92x\n","\n","# plot points and fit line\n","import matplotlib.pyplot as plt\n","plt.scatter(X, Y)\n","yfit = [a + b * xi for xi in X]\n","plt.plot(X, yfit)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["best fit line:\n","y = 0.80 + 0.92x\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f568b4ee710>]"]},"metadata":{"tags":[]},"execution_count":18},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"OwCqODIAkgkO","colab_type":"code","colab":{}},"source":["#Thay cai symbol vo day\n","import pandas as pd\n","SYMBOL = 'AAPL'\n","AlphaVantage_key = '5QQ3NMDSVUMS1EDX'\n","AlphaVantage_daily = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={SYMBOL}&apikey={API_KEY}&datatype={DATA_TYPE}&outputsize=full'\n","ms_data = pd.read_csv(AlphaVantage_daily.format(SYMBOL =  SYMBOL, API_KEY = AlphaVantage_key, DATA_TYPE = 'csv'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"dRkE2Fuajr4T","colab_type":"code","outputId":"6cb9ff6d-c912-472c-8641-b51d61d699d9","executionInfo":{"status":"ok","timestamp":1561472194738,"user_tz":240,"elapsed":235,"user":{"displayName":"Khoi Le","photoUrl":"","userId":"13786060992805210098"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["ms = ms_data.head()\n","ms"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>timestamp</th>\n","      <th>open</th>\n","      <th>high</th>\n","      <th>low</th>\n","      <th>close</th>\n","      <th>volume</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2019-06-24</td>\n","      <td>198.54</td>\n","      <td>200.16</td>\n","      <td>198.17</td>\n","      <td>198.58</td>\n","      <td>18198417</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2019-06-21</td>\n","      <td>198.80</td>\n","      <td>200.85</td>\n","      <td>198.15</td>\n","      <td>198.78</td>\n","      <td>47800589</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2019-06-20</td>\n","      <td>200.37</td>\n","      <td>200.61</td>\n","      <td>198.03</td>\n","      <td>199.46</td>\n","      <td>21513988</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2019-06-19</td>\n","      <td>199.68</td>\n","      <td>199.88</td>\n","      <td>197.31</td>\n","      <td>197.87</td>\n","      <td>21124235</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2019-06-18</td>\n","      <td>196.05</td>\n","      <td>200.29</td>\n","      <td>195.21</td>\n","      <td>198.45</td>\n","      <td>26551004</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    timestamp    open    high     low   close    volume\n","0  2019-06-24  198.54  200.16  198.17  198.58  18198417\n","1  2019-06-21  198.80  200.85  198.15  198.78  47800589\n","2  2019-06-20  200.37  200.61  198.03  199.46  21513988\n","3  2019-06-19  199.68  199.88  197.31  197.87  21124235\n","4  2019-06-18  196.05  200.29  195.21  198.45  26551004"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"oubUgpkmrV-i","colab_type":"code","outputId":"c58915de-8648-4862-9fd6-2195c690dbb7","executionInfo":{"status":"ok","timestamp":1561481988432,"user_tz":240,"elapsed":221,"user":{"displayName":"Khoi Le","photoUrl":"","userId":"13786060992805210098"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["a = ms_data['timestamp'].tolist()\n","print(a[929:935])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["['2015-10-14', '2015-10-13', '2015-10-12', '2015-10-09', '2015-10-08', '2015-10-07']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"e1l4SXBv1zx6","colab_type":"code","outputId":"f5a6c7b3-2d6e-4fec-b4af-257462087c41","executionInfo":{"status":"ok","timestamp":1561989502404,"user_tz":240,"elapsed":209,"user":{"displayName":"Khoi Le","photoUrl":"","userId":"13786060992805210098"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def date2int(year,month,day):\n","  result = 0\n","  \n","  #year\n","  div = (year - 1) // 4\n","  mod = (year - 1) % 4\n","  result += div * (365 * 4 + 1)\n","  result += mod * 365\n","  \n","  #month\n","  date_in_month = (31,28,31,30,31,30,31,31,30,31,30,31)\n","  for i in range(month - 1):\n","    result += date_in_month[i]\n","    if i == 2 and year % 4 == 0:\n","      result += 1\n","      \n","  #day\n","  result += day\n","  \n","  return result\n","  \n","  \n","  \n","def process_date(date_string):\n","  year = int(date_string[:4])\n","  month = int(date_string[5:7])\n","  day = int(date_string[8:10])\n","  return date2int(year,month,day)\n","process_date('2019-05-30')- process_date('2019-06-24')"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-25"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"tGe-AVQEAc56","colab_type":"text"},"source":["# Process input\n"]},{"cell_type":"code","metadata":{"id":"CU63PUcgAcEK","colab_type":"code","colab":{}},"source":["#Thay cai symbol vo day\n","import pandas as pd\n","import numpy as np\n","SYMBOL = 'AAPL'\n","AlphaVantage_key = '5QQ3NMDSVUMS1EDX'\n","AlphaVantage_daily = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={SYMBOL}&apikey={API_KEY}&datatype={DATA_TYPE}&outputsize=full'\n","ms_data = pd.read_csv(AlphaVantage_daily.format(SYMBOL =  SYMBOL, API_KEY = AlphaVantage_key, DATA_TYPE = 'csv'))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZU2M49kLtqAO","colab_type":"code","colab":{}},"source":["# Linear Regression\n","def best_fit(X, Y):\n","    xbar = sum(X) / len(X)\n","    ybar = sum(Y) / len(Y)\n","    n = len(X)  # or len(Y)\n","\n","    numer = sum([xi * yi for xi, yi in zip(X, Y)]) - n * xbar * ybar\n","    denum = sum([xi ** 2 for xi in X]) - n * xbar ** 2\n","\n","    b = numer / denum\n","    a = ybar - b * xbar\n","    return a, b\n","\n","\n","def predict(X, Y, x):\n","    a, b = best_fit(X, Y)\n","    return b * x + a"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"eE9S_GcQtbSM","colab_type":"code","colab":{}},"source":["def clean(date_list, close_list):\n","    i = 0\n","    while(i < len(close_list)):\n","        if(close_list[i] == 0):\n","            close_list.pop(i)\n","            date_list.pop(i)\n","        else:\n","            i+= 1\n","    return date_list, close_list"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"GVbHiw79HPdV","colab_type":"code","colab":{}},"source":["def process(ms_data):\n","    date_len = [i for i in range(11,27)]\n","    date_list = ms_data['timestamp'].tolist()\n","    date_list.reverse()\n","    close_list = ms_data['close'].tolist()\n","    close_list.reverse()\n","    date_list, close_list = clean(date_list, close_list)\n","    k = 0\n","    while(k < len(date_list) and process_date(date_list[k]) - process_date(date_list[0]) < date_len[-1]):\n","        k+= 1\n","    inputs = []\n","    outputs = []\n","    for i in range(k,len(date_list)):\n","        check = False\n","        inp = np.zeros(len(date_len))\n","        j = i - 1\n","\n","        X = []\n","        Y = []\n","        for l in range(len(date_len)):\n","            ln = date_len[l]\n","            while(j >= 0 and process_date(date_list[i]) - process_date(date_list[j]) <= ln):\n","                X = [process_date(date_list[j])] + X\n","                Y = [close_list[j]] + Y\n","                j-= 1\n","            if(len(X) < 2):\n","                check = True\n","                break\n","            inp[l] = predict(X,Y,process_date(date_list[i]))\n","        if(check):\n","            continue\n","        outputs.append(close_list[i])\n","        inputs.append(inp)\n","    in_arr = np.zeros((len(inputs), len(date_len)))\n","    out_arr = np.zeros((len(outputs), 1))\n","    for i in range(len(inputs)):\n","        in_arr[i,:] = inputs[i]\n","        out_arr[i,:] = outputs[i]\n","    return in_arr, out_arr\n","  "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JZWEzpevtQjP","colab_type":"code","colab":{}},"source":["i,o = process(ms_data)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"d4iRuDiRunKb","colab_type":"code","outputId":"7f3cfa68-5915-4e2b-89ef-d0f1fa464704","executionInfo":{"status":"ok","timestamp":1561989658890,"user_tz":240,"elapsed":203,"user":{"displayName":"Khoi Le","photoUrl":"","userId":"13786060992805210098"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["print(i.shape)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["(5391, 16)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"T6QLalO0ZV-x","colab_type":"code","colab":{}},"source":["def date2int(year,month,day):\n","  result = 0\n","  \n","  #year\n","  div = (year - 1) // 4\n","  mod = (year - 1) % 4\n","  result += div * (365 * 4 + 1)\n","  result += mod * 365\n","  \n","  #month\n","  date_in_month = (31,28,31,30,31,30,31,31,30,31,30,31)\n","  for i in range(month - 1):\n","    result += date_in_month[i]\n","    if i == 2 and year % 4 == 0:\n","      result += 1\n","      \n","  #day\n","  result += day\n","  \n","  return result\n","  \n","  \n","  \n","def process_date(date_string):\n","  year = int(date_string[:4])\n","  month = int(date_string[5:7])\n","  day = int(date_string[8:10])\n","  return date2int(year,month,day)\n","process_date('2019-05-30')- process_date('2019-06-24')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"fr5xPsYn_5W7","colab_type":"text"},"source":["# Model\n"]},{"cell_type":"code","metadata":{"id":"RLckgh5C0Sjm","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PbduVICr_7cm","colab_type":"code","colab":{}},"source":["#Linear Regression\n","def best_fit(X, Y):\n","\n","    xbar = sum(X)/len(X)\n","    ybar = sum(Y)/len(Y)\n","    n = len(X) # or len(Y)\n","\n","    numer = sum([xi*yi for xi,yi in zip(X, Y)]) - n * xbar * ybar\n","    denum = sum([xi**2 for xi in X]) - n * xbar**2\n","\n","    b = numer / denum\n","    a = ybar - b * xbar\n","    return a, b\n","  \n","def predict(X, Y, x):\n","    a, b = best_fit(X, Y)\n","    return b * x + a"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"kGP3uuFjzY5C","colab_type":"code","colab":{}},"source":["i_test = i[-500:,:]\n","o_test = o[-500:,:]\n","i_train = i[:-500,:]\n","o_train = o[:-500,:]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hl0rxcabAoST","colab_type":"code","outputId":"08f9df7a-50a0-4b83-ab24-e9e0502c2fe2","executionInfo":{"status":"ok","timestamp":1561989915187,"user_tz":240,"elapsed":322,"user":{"displayName":"Khoi Le","photoUrl":"","userId":"13786060992805210098"}},"colab":{"base_uri":"https://localhost:8080/","height":306}},"source":["import numpy as np\n","from tensorflow.python.keras.models import Model\n","from tensorflow.python.keras.layers import Dense, Input\n","from tensorflow.python.keras.optimizers import Adam, SGD\n","\n","np.random.seed(7)\n","def build(input_size):\n","  inputs = Input(input_size)\n","  fc = Dense(32)(inputs)\n","  fc = Dense(32)(fc)  \n","  out = Dense(1, activation = 'linear')(fc)\n","  model = Model(inputs, out)\n","  model.compile(loss = 'mean_squared_error', optimizer = Adam(lr = 3e-4), metrics = ['accuracy'])\n","  return model\n","model = build((16))\n","print(model.summary())"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Model: \"model_4\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","input_5 (InputLayer)         [(None, 16)]              0         \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 32)                544       \n","_________________________________________________________________\n","dense_13 (Dense)             (None, 32)                1056      \n","_________________________________________________________________\n","dense_14 (Dense)             (None, 1)                 33        \n","=================================================================\n","Total params: 1,633\n","Trainable params: 1,633\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mDdHhmm1DpzK","colab_type":"code","outputId":"1876dad9-41ac-4646-bdaa-9ee88c1196f8","executionInfo":{"status":"error","timestamp":1561990008221,"user_tz":240,"elapsed":239,"user":{"displayName":"Khoi Le","photoUrl":"","userId":"13786060992805210098"}},"colab":{"base_uri":"https://localhost:8080/","height":129}},"source":["model.fit(x = i_train,y= o_train, epochs= 10000, verbose = 2,validation_data (i_test, o_test))"],"execution_count":24,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-24-c241999871cd>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    model.fit(i_train,o_train, epochs= 10000, verbose = 2,validation_data (i_test, o_test))\u001b[0m\n\u001b[0m                                                         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m positional argument follows keyword argument\n"]}]}]}